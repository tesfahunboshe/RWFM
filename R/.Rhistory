library(lmtest)
coeftest(fixed, vcov. = vcovHC, type = "HC1")
fixef(fixed) # Extract the Fixed Effects
fixef(fixed) # Extract the Fixed Effects
panel <- read.csv("Dataset/DataNew.csv")
# head(panel)
str(panel)
panel$Pension.Type <- factor(panel$Pension.Type, labels = c(0,1,2), levels = c("fully funded","Hybrid","PAYG"))
cor.test(panel$Gross.Savings,as.numeric(panel$Pension.Type),type=pearson)
ols <-lm(Gross.Savings ~ Pension.Type + Country, data=panel)
summary(ols)
# Correlation Plots
# corplot(Gross.Savings ~ Pension.Type | Country, type="l", data=panel)
library(car)
scatterplot(Gross.Savings ~ Year | Country, boxplots=FALSE, smooth=TRUE, reg.line=FALSE, data=panel)
# Heterogeneity across countries
library(gplots)
plotmeans(Gross.Savings ~ Country, main="Heterogeineity across countries", data=panel, n.label=F)
# Heterogeneity across years
plotmeans(Gross.Savings ~ Year, main="Heterogeineity across years", data=panel, n.label=F)
# Heterogeneity across pension system type
library(gplots)
plotmeans(Gross.Savings ~ Pension.Type, main="Heterogeineity across funding types", data=panel, n.label=F)
panel$Pension.Type <- factor(panel$Pension.Type, labels = c(0,1,2), levels = c("fully funded","PAYG","Hybrid"))
cor.test(panel$Gross.Savings,as.numeric(panel$Pension.Type),type=pearson)
panel <- read.csv("Dataset/DataNew.csv")
# head(panel)
str(panel)
panel$Pension.Type <- factor(panel$Pension.Type, labels = c(0,1,2), levels = c("fully funded","PAYG","Hybrid"))
cor.test(panel$Gross.Savings,as.numeric(panel$Pension.Type),type=pearson)
ols <-lm(Gross.Savings ~ Pension.Type + Country, data=panel)
summary(ols)
# Correlation Plots
# corplot(Gross.Savings ~ Pension.Type | Country, type="l", data=panel)
library(car)
scatterplot(Gross.Savings ~ Year | Country, boxplots=FALSE, smooth=TRUE, reg.line=FALSE, data=panel)
# Heterogeneity across countries
library(gplots)
plotmeans(Gross.Savings ~ Country, main="Heterogeineity across countries", data=panel, n.label=F)
# Heterogeneity across years
plotmeans(Gross.Savings ~ Year, main="Heterogeineity across years", data=panel, n.label=F)
# Heterogeneity across pension system type
library(gplots)
plotmeans(Gross.Savings ~ Pension.Type, main="Heterogeineity across funding types", data=panel, n.label=F)
panel <- read.csv("Dataset/DataNew.csv")
# head(panel)
str(panel)
panel$Pension.Type <- factor(panel$Pension.Type, labels = c(0,1,2), levels = c("PAYG","fully funded","Hybrid"))
cor.test(panel$Gross.Savings,as.numeric(panel$Pension.Type),type=pearson)
ols <-lm(Gross.Savings ~ Pension.Type + Country, data=panel)
summary(ols)
# Correlation Plots
# corplot(Gross.Savings ~ Pension.Type | Country, type="l", data=panel)
library(car)
scatterplot(Gross.Savings ~ Year | Country, boxplots=FALSE, smooth=TRUE, reg.line=FALSE, data=panel)
# Heterogeneity across countries
library(gplots)
plotmeans(Gross.Savings ~ Country, main="Heterogeineity across countries", data=panel, n.label=F)
# Heterogeneity across years
plotmeans(Gross.Savings ~ Year, main="Heterogeineity across years", data=panel, n.label=F)
# Heterogeneity across pension system type
library(gplots)
plotmeans(Gross.Savings ~ Pension.Type, main="Heterogeineity across funding types", data=panel, n.label=F)
library(plm)
# Fixed effects model
fixed <-plm(Gross.Savings ~ Country + Year + Pension.Type + Life.Expectancy, data=panel, model="within")
summary(fixed)
# Robust standard errors
library(lmtest)
coeftest(fixed, vcov. = vcovHC, type = "HC1")
# Pooling method
ols<-lm(Gross.Savings~Country + Year + Pension.Type +  Life.Expectancy, data=panel) #pooling method
summary(ols)
#
# pols<-plm(Gross.Savings~Country + Year + Pension.Type +  Life.Expectancy, data=panel, model="random") #pooling method
# summary(pols)
# Random effects model
random <-plm(Gross.Savings~Country + Year + Pension.Type +  Life.Expectancy, data=panel, model="random", random.method = "walhus")
summary(random)
## Hausman test
#- decide between random and fixed effect models
# H0: individual and characteristic xi( all explanatory variables) are not correlated- random effect should be used.
# p-value <5% - use fixed effect.
phtest(fixed, random)
# Pftest()-to check if the model can be reduced to a simple regression model
library(lmtest)
pFtest(fixed, ols) # p- value <5% means no.
## Tests for individual and time effects
plmtest(Gross.Savings~Country + Year + Pension.Type +  Life.Expectancy, data=panel, effect="twoways", type="ghm")
#individual effects for random effects?
plmtest(random, type=c("bp"))
#individual effects for random effects?
plmtest(random,c("time"), type=c("bp"))
# Testing for auto correlation/serial autocorrelation
#Breusche-Godfrey Test for Panel Models - H0 - no autocorrelation in residuals
pbgtest(random)
# pbgtest(fixed)
# Breusch-Pagan Test: Testing for heteroskedasticity
#H0 - residuals are homoscedastic
bptest(Gross.Savings~Pension.Type, data=panel, studentize=T)
# Controlling for heteroskedasticity and autocorrelation:
# coeftest() - robust variance covariance estimator -
# if you have either heteroscedastity or autocorrelation of residuals
coeftest(random, vcov.=vcovHC(fixed, method="white1", type="HC0", cluster="group")) #Inference for Estimated Coefficients
# 2 way error component regression model.
# year dummy variable..for each year.
random.time <-plm(Gross.Savings~Pension.Type+factor(Year), data=panel, index=c("Country", "Year"), model="random")
# 2 way error component regression model.
# year dummy variable..for each year.
random.time <-plm(Gross.Savings~Pension.Type+factor(Year), data=panel, index=c("Country", "Year"), model="random", random.method = "walhus")
summary(random.time)
random.final <-plm(Gross.Savings~Pension.Type+factor(Year), data=panel, index=c("Country", "Year"), model="random", random.method = "walhus")
summary(random.final)
# 2 way error component regression model.
# year dummy variable..for each year.
random.time <-plm(Gross.Savings~Pension.Type+factor(Year)+factor(Country), data=panel, index=c("Country", "Year"), model="random", random.method = "walhus")
summary(random.time)
# 2 way error component regression model.
# year dummy variable..for each year.
random.twoway <-plm(Gross.Savings~Pension.Type+factor(Year)+factor(Country), data=panel,
index=c("Country", "Year"), model="random", random.method = "walhus",
effect = "twoways")
summary(random.twoway)
# 2 way error component regression model.
# year dummy variable..for each year.
random.twoway <-plm(Gross.Savings~Pension.Type+GDP+factor(Year)+factor(Country), data=panel,
index=c("Country", "Year"), model="random", random.method = "walhus",
effect = "twoways")
# 2 way error component regression model.
# year dummy variable..for each year.
random.twoway <-plm(Gross.Savings~Pension.Type+ Life.Expectancy +factor(Year)+factor(Country), data=panel,
index=c("Country", "Year"), model="random", random.method = "walhus",
effect = "twoways")
summary(random.twoway)
random.final <-plm(Gross.Savings~Pension.Type+ Life.Expectancy+factor(Year)+factor(Country), data=panel,
index=c("Country", "Year"), model="random", random.method = "walhus",
effect = "twoways")
summary(random.final)
panel$Pension.Type2 <- factor(panel$Pension.Type, labels = c(0,1,2), levels = c("PAYG","fully funded","Hybrid"))
cor.test(panel$Gross.Savings,as.numeric(panel$Pension.Type),type=pearson)
panel <- read.csv("Dataset/DataNew.csv")
# head(panel)
str(panel)
panel$Pension.Type2 <- factor(panel$Pension.Type, labels = c(0,1,2), levels = c("PAYG","fully funded","Hybrid"))
cor.test(panel$Gross.Savings,as.numeric(panel$Pension.Type),type=pearson)
panel$Pension.Type
panel$Pension.Type2 <- factor(panel$Pension.Type, labels = c(0,1,2), levels = c("PAYG","fully funded","Hybrid"))
cor.test(panel$Gross.Savings,as.numeric(panel$Pension.Type),type=pearson)
panel$Pension.Type2 <- factor(panel$Pension.Type, labels = c(0,1,2), levels = c("PAYG","fully funded","Hybrid"))
cor.test(panel$Gross.Savings,as.numeric(panel$Pension.Type2),type=pearson)
ols <-lm(Gross.Savings ~ Pension.Type + Country, data=panel)
summary(ols)
# Correlation Plots
# corplot(Gross.Savings ~ Pension.Type | Country, type="l", data=panel)
library(car)
scatterplot(Gross.Savings ~ Year | Country, boxplots=FALSE, smooth=TRUE, reg.line=FALSE, data=panel)
# Heterogeneity across countries
library(gplots)
plotmeans(Gross.Savings ~ Country, main="Heterogeineity across countries", data=panel, n.label=F)
# Heterogeneity across years
plotmeans(Gross.Savings ~ Year, main="Heterogeineity across years", data=panel, n.label=F)
# Heterogeneity across pension system type
library(gplots)
plotmeans(Gross.Savings ~ Pension.Type2, main="Heterogeineity across funding types", data=panel, n.label=F)
# Correlation Plots
# corplot(Gross.Savings ~ Pension.Type | Country, type="l", data=panel)
library(car)
scatterplot(Gross.Savings ~ Year | Country, boxplots=FALSE, smooth=TRUE, reg.line=FALSE, data=panel)
# Heterogeneity across countries
library(gplots)
plotmeans(Gross.Savings ~ Country, main="Heterogeineity across countries", data=panel, n.label=F)
# Heterogeneity across years
plotmeans(Gross.Savings ~ Year, main="Heterogeineity across years", data=panel, n.label=F)
# Heterogeneity across pension system type
library(gplots)
plotmeans(Gross.Savings ~ Pension.Type, main="Heterogeineity across funding types", data=panel, n.label=F)
library(plm)
# Fixed effects model
fixed <-plm(Gross.Savings ~ Country + Year + Pension.Type + Life.Expectancy, data=panel, model="within")
summary(fixed)
library(plm)
# Fixed effects model
fixed <-plm(Gross.Savings ~ factor(Country) + factor(Year) + factor(Pension.Type) + Life.Expectancy, data=panel, model="within")
summary(fixed)
# Pooling method
ols<-lm(Gross.Savings~factor(Country) + factor(Year) + factor(Pension.Type) +  Life.Expectancy, data=panel) #pooling method
summary(ols)
#
# pols<-plm(Gross.Savings~Country + Year + Pension.Type +  Life.Expectancy, data=panel, model="random") #pooling method
# summary(pols)
# Pftest()-to check if the model can be reduced to a simple regression model
library(lmtest)
pFtest(fixed, ols) # p- value <5% means no.
# Pooling method
ols<-lm(Gross.Savings~factor(Country) + factor(Year) + factor(Pension.Type) +  Life.Expectancy, data=panel) #pooling method
summary(ols)
#
# pols<-plm(Gross.Savings~Country + Year + Pension.Type +  Life.Expectancy, data=panel, model="random") #pooling method
# summary(pols)
# Pftest()-to check if the model can be reduced to a simple regression model
library(lmtest)
pFtest(fixed, ols) # p- value <5% means no.
# Pooling method
ols<-lm(Gross.Savings~factor(Country) + factor(Year) + factor(Pension.Type2) +  Life.Expectancy, data=panel) #pooling method
summary(ols)
#
# pols<-plm(Gross.Savings~Country + Year + Pension.Type +  Life.Expectancy, data=panel, model="random") #pooling method
# summary(pols)
# Pftest()-to check if the model can be reduced to a simple regression model
library(lmtest)
pFtest(fixed, ols) # p- value <5% means no.
library(plm)
# Fixed effects model
fixed <-plm(Gross.Savings ~ factor(Country) + factor(Year) + factor(Pension.Type2) + Life.Expectancy, data=panel, model="within")
summary(fixed)
# Pftest()-to check if the model can be reduced to a simple regression model
library(lmtest)
pFtest(fixed, ols) # p- value <5% means no.
# Random effects model
random <-plm(Gross.Savings~Country + Year + Pension.Type +  Life.Expectancy, data=panel, model="random", random.method = "walhus")
summary(random)
## Hausman test
#- decide between random and fixed effect models
# H0: individual and characteristic xi( all explanatory variables) are not correlated- random effect should be used.
# p-value <5% - use fixed effect.
phtest(fixed, random)
## Tests for individual and time effects
plmtest(Gross.Savings~factor(Country) + factor(Year) + factor(Pension.Type) +  Life.Expectancy, data=panel, effect="twoways", type="ghm")
setwd("C:/Users/Tesfahun Boshe/Documents/Sem 4/Thesis")
Sys.setenv(LANG = "en")
options(scipen = 5)
panel <- read.csv("Dataset/DataNew.csv")
# head(panel)
str(panel)
panel$Pension.Type2 <- factor(panel$Pension.Type, labels = c(0,1,2), levels = c("PAYG","fully funded","Hybrid"))
cor.test(panel$Gross.Savings,as.numeric(panel$Pension.Type2),type=pearson)
ols <-lm(Gross.Savings ~ Pension.Type + Country, data=panel)
summary(ols)
setwd("C:/Users/Tesfahun Boshe/Documents/Sem 4/Thesis")
Sys.setenv(LANG = "en")
options(scipen = 5)
panel <- read.csv("Dataset/DataNew.csv")
# head(panel)
str(panel)
panel$Pension.Type2 <- factor(panel$Pension.Type, labels = c(0,1,2), levels = c("PAYG","fully funded","Hybrid"))
cor.test(panel$Gross.Savings,as.numeric(panel$Pension.Type2),type=pearson)
ols <-lm(Gross.Savings ~ Pension.Type + Country, data=panel)
summary(ols)
# Correlation Plots
# corplot(Gross.Savings ~ Pension.Type | Country, type="l", data=panel)
library(car)
scatterplot(Gross.Savings ~ Year | Country, boxplots=FALSE, smooth=TRUE, reg.line=FALSE, data=panel)
# Heterogeneity across countries
library(gplots)
plotmeans(Gross.Savings ~ Country, main="Heterogeineity across countries", data=panel, n.label=F)
# Heterogeneity across years
plotmeans(Gross.Savings ~ Year, main="Heterogeineity across years", data=panel, n.label=F)
# Heterogeneity across pension system type
library(gplots)
plotmeans(Gross.Savings ~ Pension.Type, main="Heterogeineity across funding types", data=panel, n.label=F)
library(plm)
# Fixed effects model
fixed <-plm(Gross.Savings ~ Country + Year + Pension.Type + Life.Expectancy, data=panel, model="within")
summary(fixed)
# Pooling method
ols<-lm(Gross.Savings~Country + Year + Pension.Type +  Life.Expectancy, data=panel) #pooling method
summary(ols)
#
# pols<-plm(Gross.Savings~Country + Year + Pension.Type +  Life.Expectancy, data=panel, model="random") #pooling method
# summary(pols)
# Pftest()-to check if the model can be reduced to a simple regression model
library(lmtest)
pFtest(fixed, ols) # p- value <5% means no.
# Random effects model
random <-plm(Gross.Savings~Country + Year + Pension.Type +  Life.Expectancy, data=panel, model="random", random.method = "walhus")
summary(random)
## Hausman test
#- decide between random and fixed effect models
# H0: individual and characteristic xi( all explanatory variables) are not correlated- random effect should be used.
# p-value <5% - use fixed effect.
phtest(fixed, random)
## Tests for individual and time effects
plmtest(Gross.Savings~Country + Year + Pension.Type +  Life.Expectancy, data=panel, effect="twoways", type="ghm")
#individual effects for random effects?
plmtest(random, type=c("bp"))
#individual effects for random effects?
plmtest(random,c("time"), type=c("bp"))
random.final <-plm(Gross.Savings~Pension.Type+ Life.Expectancy+Year+ Country, data=panel,
index=c("Country", "Year"), model="random", random.method = "walhus",
effect = "twoways")
summary(random.final) # model summary
random.final$coefficients
table(panel$Pension.Type)
random.final$coefficients
table(panel$Pension.Type)
random.final$coefficients
random.final$residuals
Cap = read.csv("C:\\Users\\Tesfahun Boshe\\Documents\\WFM\\RWFM\\R\\capacityPlan.csv")
source("OptimSched.R")
setwd("~/WFM/RWFM/R")
source("OptimSched.R")
OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 5,minEfficiency = 0.5,intervals = 24,partTime = F,minShiftLength = NULL)
OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 5,minEfficiency = 0.1,intervals = 24,partTime = F,minShiftLength = NULL)
source("OptimSched.R")
OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 5,minEfficiency = 0.1,intervals = 24,partTime = F,minShiftLength = NULL)
View(Cap)
covrge <- data.frame(matrix(ncol = 7, nrow = 24))
View(covrge)
colnames(covrge) <- lapply(1:nDays, paste0,"_Date")
colnames(covrge) <- lapply(1:7, paste0,"_Date")
View(covrge)
schedule = read.csv("C:\\Users\\Tesfahun Boshe\\Documents\\WFM\\RWFM\\R\\schedule.csv")
head(schedule)
source("Sch2Coverage.R")
coverage(schedule,nDays = 7,intervals=24)
source("SchEfficiency.R")
cvrg = coverage(schedule,nDays = 7,intervals=24)
source("SchEfficiency.R")
accuracy_F(cvrg,Cap)
schedule = read.csv("C:\\Users\\Tesfahun Boshe\\Documents\\WFM\\RWFM\\R\\schedule.csv")
head(schedule)
source("Sch2Coverage.R")
cvrg = coverage(schedule,nDays = 7,intervals=24)
head()
head(cvrg)
cvrg
schedule = read.csv("C:\\Users\\Tesfahun Boshe\\Documents\\WFM\\RWFM\\R\\schedule.csv")
cvrg = coverage(schedule,nDays = 7,intervals=24)
cvrg
Cap = read.csv("C:\\Users\\Tesfahun Boshe\\Documents\\WFM\\RWFM\\R\\capacityPlan.csv")
OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 5,minEfficiency = 0.1,intervals = 24,partTime = F,minShiftLength = NULL)
Cap = read.csv("C:\\Users\\Tesfahun Boshe\\Documents\\WFM\\RWFM\\R\\capacityPlan.csv")
ncol(Cap)
lapply(1:nDays, paste0,"_Date")
lapply(1:7, paste0,"_Date")
ncol(cvrg)
cvrg
TotalCoverage <- data.frame(matrix(0, ncol = 7, nrow = 24))
TotalCoverage
Cap = read.csv("C:\\Users\\Tesfahun Boshe\\Documents\\WFM\\RWFM\\R\\capacityPlan.csv")
Cap
source("OptimSched.R")
OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.1,intervals = 24,partTime = F,minShiftLength = NULL)
lapply(1:nDays, paste0,"_Date")
lapply(1:7, paste0,"_Date")
nDays = ncol(cap_plan)
source("OptimSched.R")
OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.1,intervals = 24,partTime = F,minShiftLength = NULL)
source("OptimSched.R")
OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.1,intervals = 24,partTime = F,minShiftLength = NULL)
source("OptimSched.R")
OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.1,intervals = 24,partTime = F,minShiftLength = NULL)
source("OptimSched.R")
OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.1,intervals = 24,partTime = F,minShiftLength = NULL)
lifecycle::last_lifecycle_warnings()
Cap = read.csv("C:\\Users\\Tesfahun Boshe\\Documents\\WFM\\RWFM\\R\\capacityPlan.csv")
source("OptimSched.R")
OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.1,intervals = 24,partTime = F,minShiftLength = NULL)
source("OptimSched.R")
OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.1,intervals = 24,partTime = F,minShiftLength = NULL)
source("OptimSched.R")
OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.1,intervals = 24,partTime = F,minShiftLength = NULL)
a <- OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.1,intervals = 24,partTime = F,minShiftLength = NULL)
View(a)
a
seq(0,(24-1),2)
ggplot(a, aes(x = Interval)) +
geom_col(aes(y = StaffedHeads),fill="tomato4")+
geom_line(aes(y = RequiredHeads),fill="darkgreen", size = 1.5)+
facet_wrap(~Date,ncol = 2)+
scale_x_continuous(breaks = seq(0,(intervals-1),2))
ggplot(a, aes(x = Interval)) +
geom_col(aes(y = StaffedHeads),fill="tomato4")+
geom_line(aes(y = RequiredHeads),fill="darkgreen", size = 1.5)+
facet_wrap(~Date,ncol = 2)+
scale_x_continuous(breaks = seq(0,(24-1),2))
Cap = read.csv("C:\\Users\\Tesfahun Boshe\\Documents\\WFM\\RWFM\\R\\capacityPlan.csv")
Cap
source("OptimSched.R")
OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 5,minEfficiency = 0.1,intervals = 24,partTime = F,minShiftLength = NULL)
?geom_line
?geom_col
?geom_line
source("OptimSched.R")
OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 5,minEfficiency = 0.1,intervals = 24,partTime = F,minShiftLength = NULL)
a = list(a = 1,b = 1)
a$a
b$1
a$b
source("OptimSched.R")
solution = OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 5,minEfficiency = 0.1,intervals = 24,partTime = F,minShiftLength = NULL)
solution$agents
Cap = read.csv("C:\\Users\\Tesfahun Boshe\\Documents\\WFM\\RWFM\\R\\capacityPlan.csv")
source("OptimSched.R")
list(agents,coverage,plot,schedule) = OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.8,intervals = 24,partTime = F,minShiftLength = NULL)
Cap = read.csv("C:\\Users\\Tesfahun Boshe\\Documents\\WFM\\RWFM\\R\\capacityPlan.csv")
source("OptimSched.R")
answer = OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.8,intervals = 24,partTime = F,minShiftLength = NULL)
answer$agents
answer$coverage
answer$plot
answer$schedule
?geom_bar
Cap = read.csv("C:\\Users\\Tesfahun Boshe\\Documents\\WFM\\RWFM\\R\\capacityPlan.csv")
source("OptimSched.R")
answer = OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.8,intervals = 24,partTime = F,minShiftLength = NULL)
answer$agents
answer$coverage
answer$plot
answer$schedule
answer = OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.8,intervals = 24,partTime = T,minShiftLength = 4)
source("OptimSched.R")
answer = OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.8,intervals = 24,partTime = T,minShiftLength = 4)
?substring
index <- paste(0,1,5,sep = "_")
index\
index
DaysCombo <- combn(1:7, 5)
DaysCombo
days = DaysCombo[,as.numeric(substring(index,which(strsplit(index, "")[[1]]=="_")+1,nchar(index)))]
index <- paste(0,1,sep = "_")
days = DaysCombo[,as.numeric(substring(index,which(strsplit(index, "")[[1]]=="_")+1,nchar(index)))]
days
DaysCombo
as.numeric(substring(index,which(strsplit(index, "")[[1]]=="_")+1,nchar(index)))
index
substring(index,which(strsplit(index, "")[[1]]=="_")+1,nchar(index))
which(strsplit(index, "")[[1]]=="_")+1
which(strsplit(index, "")[[1]]=="_")
which(strsplit(index, "")[[1]]=="1")
index <- paste(0,1,5,sep = "_")
which(strsplit(index, "")[[1]]=="1")
index
which(strsplit(index, "")[[1]]=="_")
as.numeric(substring(bestcombo,which(strsplit(bestcombo, "")[[2]]=="_")+1,nchar(bestcombo)))
as.numeric(substring(index,which(strsplit(index, "")[[2]]=="_")+1,nchar(index)))
index
which(strsplit(index, "")[[2]]=="_")
which(strsplit(index, "")[[1]]=="_")
as.numeric(substring(index,which(strsplit(index, "")[[1]]=="_")+1,nchar(index)))
substring(index,which(strsplit(index, "")[[1]]=="_")+1,nchar(index))
substring(index,which(strsplit(index, "")[[1]]=="_")+1
nchar(index)
substring(index,2,5)
bestcombo = index
DaysCombo[,as.numeric(substring(bestcombo,which(strsplit(bestcombo, "")[[1]]=="_")+1,nchar(bestcombo)))]
index = paste(0,1,sep = "_")
DaysCombo[,as.numeric(substring(bestcombo,which(strsplit(bestcombo, "")[[1]]=="_")+1,nchar(bestcombo)))]
bestcombo = index
DaysCombo[,as.numeric(substring(bestcombo,which(strsplit(bestcombo, "")[[1]]=="_")+1,nchar(bestcombo)))]
index = paste(0,1,5,sep = "_")
index
bestcombo = index
DaysCombo[,as.numeric(substring(bestcombo,which(strsplit(bestcombo, "")[[1]]=="_")+1,nchar(bestcombo)))]
as.numeric(substring(bestcombo,which(strsplit(bestcombo, "")[[1]]=="_")+1,nchar(bestcombo)))
nchar(bestcombo)
substring(bestcombo,which(strsplit(bestcombo, "")[[1]]=="_")+1,5)
bestcombo,which(strsplit(bestcombo, "")[[1]]=="_")+1
which(strsplit(bestcombo, "")[[1]]=="_")+1
bestcombo
which(strsplit(bestcombo, "")[[1]]=="_")+1[1]
which(strsplit(bestcombo, "")[[1]]=="_")+1[1,]
which(strsplit(bestcombo, "")[[1]]=="_")+1[,1]
length(which(strsplit(bestcombo, "")[[1]]=="_")+1)
class(which(strsplit(bestcombo, "")[[1]]=="_")+1)
which(strsplit(bestcombo, "")[[1]]=="_")+1[1,1]
dim(which(strsplit(bestcombo, "")[[1]]=="_")+1)
Cap = read.csv("C:\\Users\\Tesfahun Boshe\\Documents\\WFM\\RWFM\\R\\capacityPlan.csv")
source("OptimSched.R")
answer = OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.8,intervals = 24,partTime = T,minShiftLength = 4)
answer$agents
answer$coverage
answer$plot
answer$schedule
source("OptimSched.R")
answer = OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.8,intervals = 24,partTime = T,minShiftLength = 4)
index = paste(0,1,5,sep = "_")
bestcombo = index
DaysCombo[,as.numeric(substring(bestcombo,which(strsplit(bestcombo, "")[[1]]=="_")+1,
as.numeric(substring(bestcombo,1,which(strsplit(bestcombo, "")[[1]]=="*")-1))))]
as.numeric(substring(bestcombo,which(strsplit(bestcombo, "")[[1]]=="_")+1,
+                                 as.numeric(substring(bestcombo,1,which(strsplit(bestcombo, "")[[1]]=="*")-1))))
substring(bestcombo,which(strsplit(bestcombo, "")[[1]]=="_")+1,
as.numeric(substring(bestcombo,1,which(strsplit(bestcombo, "")[[1]]=="*")-1)))
which(strsplit(bestcombo, "")[[1]]=="_")+1
as.numeric(substring(bestcombo,1,which(strsplit(bestcombo, "")[[1]]=="*")-1))
index = paste(0,1,sep = "_")
index = paste(index,5,sep = "*")
index
bestcombo = index
as.numeric(substring(bestcombo,1,which(strsplit(bestcombo, "")[[1]]=="*")-1))
substring(bestcombo,1,which(strsplit(bestcombo, "")[[1]]=="*")-1)
which(strsplit(bestcombo, "")[[1]]=="*")
which(strsplit(bestcombo, "")[[1]]=="_")
DaysCombo[,as.numeric(substring(bestcombo,which(strsplit(bestcombo, "")[[1]]=="_")+1,
which(strsplit(bestcombo, "")[[1]]=="*")-1))]
as.numeric(substring(bestcombo,1,which(strsplit(bestcombo, "")[[1]]=="_")-1))
as.numeric(substring(bestcombo,which(strsplit(bestcombo, "")[[1]]=="*")+1,nchar(bestcombo)))
source("OptimSched.R")
answer = OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.8,intervals = 24,partTime = T,minShiftLength = 4)
as.numeric(substring(bestcombo,which(strsplit(bestcombo, "")[[1]]=="_")+1,
which(strsplit(bestcombo, "")[[1]]=="*")-1))
bestcombo
which(strsplit(bestcombo, "")[[1]]=="*")-1)
which(strsplit(bestcombo, "")[[1]]=="*")-1
which(strsplit(bestcombo, "")[[1]]=="_")+1
substring(bestcombo,3,3)
answer = OptimumSchedule(Cap, shiftLength = 8,weeklyWorkingDays = 7,minEfficiency = 0.8,intervals = 24,partTime = F,minShiftLength = 4)
answer$agents
answer$coverage
answer$plot
answer$schedule
